/*
	(C)2015 Jarrod MacKay
	April 30, 2015
	
	CsvFile.h
	Represents a Comma-Seperated Value file generated by Microsoft Excel 2010(R)
*/

#pragma once
#ifndef CSVFILE_H
#define CSVFILE_H

#include "Table.h"

namespace CSV
{
	class CsvFile
	{
	public:

		CsvFile(const std::string& p_sFilename = "") :
			m_pTable(nullptr),
			m_sFilename(p_sFilename)
		{}

		bool readInText(void)
		{
			//open and check the file stream
			std::ifstream inFile(m_sFilename.c_str());
			if (!inFile.good())
			{
				inFile.close();
				return false;
			}

			//read in each line as a string	
			std::string inString;
			std::vector<std::string> rawLines;
			while (inFile.good())
			{
				std::getline(inFile, inString, '\n');
				if (!inString.empty())
				{
					rawLines.push_back(inString);
				}
			}		

			//check that the whole file was read
			if (!inFile.good() && !inFile.eof())
			{
				inFile.close();
				return false;
			}

			//stop using the file
			inFile.close();

			//create the table if data available
			if (rawLines.size() < 1) return false;
			std::vector<std::string> parsedRow(0);
			parsedRow = parseStringToVector(rawLines[0], parsedRow);
			unsigned int numberOfAttributes = parsedRow.size();
			m_pTable.swap(std::make_unique<Table>(numberOfAttributes));
			
			//feed in header
			m_pTable->addHeader(parsedRow);
			parsedRow.clear();

			//feed in each row
			for (unsigned int i = 1; i < rawLines.size(); ++i)
			{
				//check
				parsedRow = parseStringToVector(rawLines[i], parsedRow);
				if (parsedRow.size() != numberOfAttributes) return false;

				//feed
				m_pTable->addRecord(parsedRow);
				parsedRow.clear();
			}
			return true;
		}

		const std::string& getFilename(void) const
		{
			return m_sFilename;
		}

		const Table& getTable(void) const
		{
			return *m_pTable;
		}

	private:

		std::unique_ptr<Table> m_pTable;

		std::string m_sFilename;

		//parses and returns a comma-separated line of text
		std::vector<std::string>& parseStringToVector(
			const std::string& p_uiSource,
			std::vector<std::string>& p_vSink)
		{
			std::stringstream source(p_uiSource);
			std::string valueString("");

			while (source.good())
			{
				std::getline(source, valueString, ',');
				p_vSink.push_back(valueString);
			}

			return p_vSink;
		}
	};
};
#endif